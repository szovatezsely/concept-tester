spring.application.name=concept-tester

# ================================
# H2 Database Configuration
# ================================
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# ================================
# JPA / Hibernate
# ================================
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update

# ================================
# H2 Console (optional)
# ================================
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# ================================
# Kafka bootstrap server
# ================================
spring.kafka.bootstrap-servers=localhost:9092,localhost:9094,localhost:9096

# ================================
# General Kafka Settings
# ================================
# Trust SSL or self-signed certs? (not needed for PLAINTEXT)
# spring.kafka.properties.security.protocol=PLAINTEXT

# Topic name for demo (you can override this in your @KafkaListener)
app.kafka.topic=demo-topic

# ================================
# Consumer configuration
# ================================
# Consumer group ID (shared among consumers in the same group)
spring.kafka.consumer.group-id=demo-group

# Start from the earliest offset if no committed offset found
spring.kafka.consumer.auto-offset-reset=earliest

# Deserializers (convert bytes back to strings)
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Enable automatic offset commit (true by default)
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-commit-interval=1000

# Increase consumer fetch batch size (performance)
spring.kafka.consumer.fetch-min-bytes=50000
spring.kafka.consumer.fetch-max-wait=500

# ================================
# Producer configuration
# ================================
# Key/value serializers (convert Java objects to bytes for sending)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# Enable Idempotent Producer (avoid duplicate sends)
spring.kafka.producer.enable-idempotence=true

# Control how many in-flight requests per connection (how many requests can be sent without waiting for acknowledgments)
# 5 is the max value with idempotence enabled
spring.kafka.producer.max-in-flight-requests-per-connection=5

# Optional: ensure producer waits for all replicas to acknowledge
spring.kafka.producer.acks=all

# Optional: retry sending messages if transient failure
spring.kafka.producer.retries=3

# Optional: batch size for performance (default 16KB)
spring.kafka.producer.batch-size=16384
spring.kafka.producer.linger-ms=1

# ================================
# Kafka Logging
# ================================
# Show Kafka debug logs for troubleshooting
# logging.level.org.apache.kafka=INFO
# logging.level.org.springframework.kafka=INFO